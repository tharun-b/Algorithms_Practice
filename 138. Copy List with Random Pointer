/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head == NULL) return NULL; 
        
        unordered_map<RandomListNode* , RandomListNode*>table; 
        
        
        auto ptr = head; 
        RandomListNode *nhead = new RandomListNode(ptr->label); 
        table[head] = nhead; 

        auto nptr = nhead; 
        auto prevptr =  nhead; 
        
        
        ptr = ptr->next;
        while(ptr)
        {                        
            RandomListNode *nptr = new RandomListNode(ptr->label); 
            table[ptr] = nptr; 
            prevptr->next  = nptr;  
            
            ptr = ptr->next;
            prevptr = nptr; 
        }
        
        ptr  = head; 
        nptr = nhead; 
        while(ptr)
        {
           nptr->random =  table[ptr->random];
           ptr = ptr->next;
           nptr = nptr->next; 
        }
        
        return nhead;
    }
};
