/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))
class compare_1{
public:
    bool operator()(Interval &i1, Interval &i2)
    {
        if(i1.start < i2.start)
        {
            return true ;
        }
        else if((i1.start > i2.start))
        {
            return false; 
        }
        else
        {
            if(i1.end < i2.end)
            {
                return true; 
            }
            else
            {
                return false; 
            }
        }
    }
};

class Solution {
public:
    bool isOverlapping(Interval &i1, Interval &i2)
    {
        
        int start = i1.start;
        int end = i1.end;

        if((start <= i2.start) && (end >= i2.start)) return true;
        if((start <= i2.end) && (end >= i2.end)) return true;
        if((start >= i2.start) && (end <= i2.end)) return true;

        return false;
    }

    
    vector<Interval> merge(vector<Interval>& intervals) {
            int n = intervals.size();
            if(n<1) return {};
            vector<Interval> result; 
           
        sort(intervals.begin(), intervals.end(),compare_1());
        // for(auto a:intervals )
        // {
        //     cout<<"["<<a.start<<","<<a.end<<"]"<<"\t";
        // }
        
        Interval cur = intervals[0];
        
        for(int i = 1; i < n; i++)
        {
            if(isOverlapping(cur,intervals[i]))
            {
                cur.start = min(cur.start , intervals[i].start);
                cur.end = max(cur.end, intervals[i].end);
            }
            else
            {
                result.push_back(cur);
                cur = intervals[i];
            }
        }
        
        result.push_back(cur);

        return result; 
    }
};
