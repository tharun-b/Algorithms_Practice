class RandomizedSet {
public:
    unordered_map<int,int> hashidx; //val to idx
    vector<int> hashval; //idx to val
    int ct =0; 
    /** Initialize your data structure here. */
    RandomizedSet() {
        ct =0; 
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(!hashidx.count(val))
        {
            hashidx[val] = ct;
            hashval.push_back(val); 
            ct++;
            return true;
        }
        else
            return false; 
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(hashidx.count(val))
        {
            
            int  c = hashidx[val];
            hashidx.erase(val);
                        cout<<c<<endl;

                        cout<<hashval[c]<<endl;
                        cout<<hashval[ct-1]<<endl;
            if(c != (ct-1))
            {
                hashval[c] = hashval[ct-1];
                hashidx[hashval[c]] = c; 
            }
            hashval.pop_back(); 
            ct--;
            
            return true;
        }
        else
            return false; 
        
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int r ; 
      //  cout<<ct;
       if(hashval.size())
         r = rand()%hashval.size(); 
        else 
            return INT_MAX; 
        
        return hashval[r];
        
    }
    
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
