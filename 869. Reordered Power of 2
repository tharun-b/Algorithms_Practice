class Solution {
public:
    
    bool permute(vector<int> &num, int i , int zerc)
    {
        if(i == num.size())
        {
            
            int val =0; 
            if(num[0] ==0) return false; 
            
            for(int j=0; j< num.size(); j++)
            {
                
                val = val * 10 + num[j]; 
                
            }
            
            while(zerc)
            {
                val = val*10; 
                zerc--; 
            }         
            
            // cout<<val<<endl; 
            
            if((val& (val-1)) ==0) return true; 
            
        }
        else
        {
            for(int k =i; k< num.size(); k++)
            {
                
                swap(num[k], num[i]); 
                
                if(permute(num,i+1, zerc)) return true; 
                   
                swap(num[k], num[i]); 
            }
        }
       
        return false; 
        
        
        
    }
    bool reorderedPowerOf2(int N) {
        int n = N; 
        if(n<1) return 0; 
        
        vector<int> num; 
        int zerc = 0; 
        
        while(n)
        {
            {
                num.push_back(n%10);
            }
            
            n = n/10; 
        }
        
       return  permute(num, 0, zerc); 
        
        
    }
};
