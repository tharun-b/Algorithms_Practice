class Solution {
 
  
public:
       
    int ar[256];
    Solution()
    {
        memset(&ar, 0, sizeof ar);
        ar['q'] = 1;
        ar['w'] = 1;
        ar['e'] = 1;
        ar['r'] = 1;
        ar['t'] = 1;
        ar['y'] = 1;
        ar['u'] = 1;
        ar['i'] = 1;
        ar['o'] = 1;
        ar['p'] = 1;
        ar['q'] = 1;
            ar['Q'] = 1;
        ar['W'] = 1;
        ar['E'] = 1;
        ar['R'] = 1;
        ar['T'] = 1;
        ar['Y'] = 1;
        ar['U'] = 1;
        ar['I'] = 1;
        ar['O'] = 1;
        ar['P'] = 1;
        ar['Q'] = 1;
        
        
        ar['A'] = 2;
        ar['S'] = 2;
        ar['D'] = 2;
        ar['F'] = 2;
        ar['G'] = 2;
        ar['H'] = 2;
        ar['J'] = 2;
        ar['K'] = 2;
        ar['L'] = 2;
          ar['a'] = 2;
        ar['s'] = 2;
        ar['d'] = 2;
        ar['f'] = 2;
        ar['g'] = 2;
        ar['h'] = 2;
        ar['j'] = 2;
        ar['k'] = 2;
        ar['l'] = 2;
        
        ar['z'] = 3;
        ar['x'] = 3;
        ar['c'] = 3;
        ar['v'] = 3;
        ar['b'] = 3;
        ar['n'] = 3;
        ar['m'] = 3;
         ar['Z'] = 3;
        ar['X'] = 3;
        ar['C'] = 3;
        ar['V'] = 3;
        ar['B'] = 3;
        ar['N'] = 3;
        ar['M'] = 3;
       
    }
    
    bool is_in_a_row(string &str)
    {
        cout<<endl; 
        int map = ar[str[0]]; 
        for(int i =0; i<str.size(); i++)
        {
            
            cout<<str[i]<<ar[str[i]]<<' ' <<map<<endl; 
            if(map == ar[str[i]])
                continue; 
            else 
                return false; 
        }
               
        return true; 
    }
    
    vector<string> findWords(vector<string>& words) {
        
        vector<string> result;
        for_each(words.begin(),words.end(), [&](string &strin){ if(this->is_in_a_row(strin)) {result.push_back(strin); }});
        return result; 
        
    }
};
