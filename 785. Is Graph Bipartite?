class Solution {
public:
    
    bool DFS(int i ,vector<unordered_set<int>> &set1, bool pong, vector<vector<int>>& graph, vector<int> &visited)
    {
        visited[i] = 1; 
        
        for( int k =0; k < graph[i].size(); k++)
        {
            int dest = graph[i][k]; 

            if(set1[pong].find(dest) != set1[pong].end())
            {
                return false; 
            }

            
           if(visited[dest] != 0) continue; 

            set1[!pong].insert(dest);
            
            bool f = DFS( dest,set1, !pong, graph, visited );
            if(f == false) return false; 
            
        }
        visited[i] = 2; 
        
        return true; 
    }
    bool isBipartite(vector<vector<int>>& graph) {
        
        int n = graph.size();
        vector<int> visited(n,0);
        vector<unordered_set<int>> set1(2,unordered_set<int>());
        
        for(int i =0; i<n; i++)
        {
            if(visited[i] != 0)
            {
                continue;
            }
            else  
            {
                set1[0].insert(i);
                bool f = DFS(i,set1, 0, graph, visited );
                if(f == false) return false; 
                
            }
         }
        
        
//         for(int i =0; i< n; i++)
//         {
//             cout<<i<<"->";
            
//             if(set1[0].find(i) != set1[0].end())
//             {
//                 cout<<"0,";
//             }
//             if(set1[1].find(i) != set1[1].end())
//             {
//                 cout<<"1,";
//             }
            
//             cout<<"\t";
//         }
        return true;    
    }
};
