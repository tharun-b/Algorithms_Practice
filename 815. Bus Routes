class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int S, int T) {
        int n = routes.size(); 
        if(n< 1) return -1; 
        if( S == T ) return 0; 
        
        unordered_map<int, unordered_set<int>> hash; 
        unordered_map<int, int> distance; 

        for(int i =0; i< n; i++)
        {
            for(int j=0; j<routes[i].size(); j++)
            {
                int curstop= routes[i][j]; 
                 hash[curstop].insert(i); 
                
                distance[curstop] = INT_MAX;
            }
        }
        
        distance[S] =0; 
        
        queue<int> Q; 
        Q.push(S); 
        
        
        while(!Q.empty())
        {
            int cur = Q.front(); 
            Q.pop(); 
            
            int curd = distance[cur] ; 
            for(auto itr = hash[cur].begin(); itr!= hash[cur].end(); itr++)
            {
                
                int edge = *itr; 
                for(int j =0; j< routes[edge].size(); j++)
                {
                    int curedge = routes[edge][j]; 
                    if(curedge == cur) continue; 

                    if(distance[curedge] == INT_MAX) 
                    {
                        Q.push(curedge);
                    }
                    else
                    {
                        continue;
                    }
                    
                    if((curd+1 )< distance[curedge])
                    {
                        distance[curedge] = curd+1;
                    }
                
                    if(curedge == T) return distance[curedge]; 
                 }
                                
            }
            
            // for(auto itr = distance.begin(); itr!= distance.end(); itr++)
            // {
            //     cout<< itr->first<<","<<itr->second<<"\t"; 
            // }
            // cout<<endl;
            
        }        
        
        if(distance.count(T)<1) return -1; 
        if(distance[T]== INT_MAX) return -1; 
        
        return distance[T];
        
        
        
        
    }
};
