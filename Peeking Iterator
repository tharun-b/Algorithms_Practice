// Below is the interface for Iterator, which is already defined for you.
// **DO NOT** modify the interface for Iterator.
class Iterator {
    struct Data;
	Data* data;
public:
	Iterator(const vector<int>& nums);
	Iterator(const Iterator& iter);
	virtual ~Iterator();
	// Returns the next element in the iteration.
	int next();
	// Returns true if the iteration has more elements.
	bool hasNext() const;
};


class PeekingIterator : public Iterator {
public:
    int cur_val; 
    class Iterator *_pitr; 
    bool ended = false; 
    
	PeekingIterator(const vector<int>& nums) : Iterator(nums) {
	    // Initialize any member here.
	    // **DO NOT** save a copy of nums and manipulate it directly.
	    // You should only use the Iterator interface methods.
        
       // delete _pitr; 
        
        _pitr = new Iterator(nums);
        ended = false; 
        
        if(_pitr->hasNext())
        {
            cur_val = _pitr->next(); 
        }
        else
        {
            ended = true; 
        }
	}

    // Returns the next element in the iteration without advancing the iterator.
	int peek() {
        return cur_val; 
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	int next() {
        
        int temp = cur_val;
        
	    if(_pitr->hasNext())
        {
            cur_val = _pitr->next(); 
        }
        else
        {
            ended = true; 
        }
        return temp; 
	}

	bool hasNext() const {
	    if(ended) 
            return false; 
        else 
            return true; 
	}
    
    ~PeekingIterator() {

        delete _pitr; 
        
	}
    
    
};
