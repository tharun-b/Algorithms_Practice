class Solution {
public:
        int DFS(vector<vector<int>>& grid, int i, int j , vector<vector<int>>& marked)
        {
            
            int count =0 ;
            if(marked[i][j] ==1) return 0; 
            marked[i][j] =1; 
            if(i>0) 
            {
                if(grid[i-1][j] ==1) 
                count += DFS(grid,i-1,j,marked); 
                else 
                count++; 
            } else count++; 
            
            if(j>0) 
            {
                if(grid[i][j-1] ==1) 
                count += DFS(grid,i,j-1,marked); 
                else 
                count++; 
            } else count++; 
            if(j<grid[0].size()-1) 
            {
                if(grid[i][j+1] ==1) 
                count += DFS(grid,i,j+1,marked); 
                else 
                count++; 
            } else count++; 
            if(i<grid.size()-1) 
            {
                if(grid[i+1][j] ==1) 
                count += DFS(grid,i+1,j,marked); 
                else 
                count++; 
            } else count++; 
        
            return count; 
        
        }
    int islandPerimeter(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n<1) return 0; 
        int m = grid[0].size(); 
        vector<vector<int>> marked(n,vector<int>(m,0));

        int count =0 ;
        for(int  i=0; i< n; i++)
        {
            for (int j=0 ; j<m; j++)
            {
                if(grid[i][j] ==1)
                 return DFS(grid,i,j,marked);
            }
        }
       
    
        
        return count; 
        
    }
};
