class Solution {
    
public:
    void DFS(vector<vector<char>>& grid, vector<vector<int>>& v,int i , int j,int m , int n  )
    {
        if((v[j][i]==1)|| grid[j][i] =='0') return; 
        
        v[j][i] =1; 
        if(i)
        DFS(grid,v,i-1,j,m,n);
        if(j)
        DFS(grid,v,i,j-1,m,n);
        if(i<m-1)
        DFS(grid,v,i+1,j,m,n);
        if(j<n-1)
        DFS(grid,v,i,j+1,m,n);
        return;
    }
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size()<1) return 0;
        
        int n = grid.size(); 
        int m = grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        
        int count =0; 
        for(int j =0; j< n; j++)
        for(int i = 0 ; i<m; i++)
        {
             if((grid[j][i] == '1')&&(visited[j][i] ==0) )
             {
                DFS(grid,visited,i,j,m,n);
                count++; 
             }
        }
      
        return count; 
    }
};
