class Solution {
public:
    string customSortString(string S, string T) {
        
        int m = S.size();
        if(m<1) return T;
        
        int n = T.size();
        
        unordered_map<int, int>  hash;
        vector<int> lookup; 
            
        for(int i =0; i<m; i++)
        {
            hash[S[i]-'a'] = i; 
            lookup.push_back(S[i]-'a');
        }
        //cout<<hash.size()<<"\t";

        vector<int> vect; 
        string ext = "";
        for(int i=0; i<n; i++)
        {
                  //  cout<<T[i]<<"\t, ";

            if(hash.find(T[i]-'a') != hash.end())
            {
                //cout<<"ad ";
                vect.push_back(hash[T[i]-'a']);
            }
            else
            {
                ext += T[i];                
            }
            
        }
        
        sort(vect.begin(), vect.end()); 
        
        string out; 
        for(auto v:vect)
        {
            out.push_back(lookup[v] + 'a');
        }
        
        return (out+ext);
        
    }
};
