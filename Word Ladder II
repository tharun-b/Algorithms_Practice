class Solution {
public:
    
    bool unitdistance(string &s, string &t)
    {
        int count = 0; 
        for(int i =0; i < s.size(); i++)
        {
            count += (s[i] != t[i]); 
            if(count>1) return 0; 
        }
        
        return count; 
    }
    
   int DFS(vector<vector<int>> &parents, int cur, vector<string> a, vector<vector<string>> &result, vector<string>& wordList, string &beginWord)
   {
       if(cur == -1) 
       {
           a.push_back(beginWord); 
           reverse(a.begin(), a.end()); 
           result.push_back(a); 
           return 0; 
       }
       
            a.push_back(wordList[cur]); 
           for(int curin:parents[cur])
           {
               DFS(parents, curin, a, result, wordList, beginWord); 
           }
        return 0; 
   }

                
    
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        
         if(wordList.size() < 1) return {}; 

            
        vector< vector<string> > ret (1, vector<string>());
    
        if((beginWord == endWord))
        {
            return {};
        }
        
        int n = wordList.size(); 

        
        vector<vector<int>> edge(n , vector<int>()); 
        vector<int> distance(n,INT_MAX); 
        vector<vector<int>> parents(n, vector<int> ()); 

        
        queue<int> que; 
        int end = -1; 
        
        
        for(int i =0; i <n ; i++)
        {
            if(wordList[i] == endWord)
            {
                end = i; 
            }
                
            if(unitdistance(beginWord, wordList[i]))
            {
                 if(wordList[i] == endWord) 
                 {
                     ret[0].push_back(beginWord); 
                     ret[0].push_back(endWord); 
                     return ret ; 
                 }
                
                parents[i].push_back(-1); 
                que.push(i); 
                distance[i]  = 2; 
            }
            
            for(int j = i+1; j < n; j++)
            {
                if(unitdistance (wordList[i], wordList[j]))
                {
                    edge[i].push_back(j); 
                    edge[j].push_back(i);
                }
                
                
            }
          
        }
        
        if(end < 0) return {}; 
        
        while(!que.empty())
        {
            int cur =  que.front(); 
            
            que.pop(); 
            
            int curd = distance[cur]; 
                 
            //if(wordList[i] == endWord) return curd; 

            
            for(int w:edge[cur])
            {
                if(distance[w] == INT_MAX) 
                    que.push(w); 
                if(distance[w] == (curd +1))
                {
                    parents[w].push_back(cur); 
                }
                if(distance[w] >  (curd +1))
                {
                    distance[w] = curd +1; 
                    parents[w] = vector<int> (1, cur); 
                }
        
                    distance[w] = min(curd+1, distance[w]);                 
            }
        }
        
        // for(auto c:distance) cout<< c<<"\t";
        // cout <<endl; 
        if(distance[end] == INT_MAX) return {}; 
        
        vector<string> temp; 
        vector< vector<string> > ret1 ;

        DFS(parents, end,temp, ret1, wordList, beginWord ); 

        return ret1; 
        // hit" -> "hot" -> "dot" -> "dog" -> "cog"
    }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
       // https://leetcode.com/problems/word-ladder/description/
        
        
        
        
        
        
        
    
};
