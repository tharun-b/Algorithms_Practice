class Solution {
public:
    bool parse_tabs(string &s,string &result, int &ct)
    {
        string res;
        ct = 0;
        int ws = 0; 
        int i =0; 
        
        // while(s[i] == ' ')
        // {
        //     ws++;
        //     i++;
        // }
        
        bool flag  =false; 
        
        for(;i<s.size(); i++)
        {
            auto a = s[i];
            
            if(a =='\t')
                ct++;
            
            flag = (flag || (a=='.'));
        }

        result = s.substr(ct,s.size()-ct);
        
        return flag; 
            
    }
    
    int lengthLongestPath(string input) {
        int n(input.size());
        if(n<1) return 0;  
        vector<string> buffer; 
        int maxval = 0; 
        
        int prev =0; 
        for(int i =0; i<n; i++)
        {
            if(((input[i] == '\n' ) || (i == n-1)))
            {
                int ct =0; 
                if(i==n-1) i++; 
                string s = input.substr(prev, i-prev);
                string result; 
                bool isFile = parse_tabs(s,result, ct);
               // cout<<s<<"<-s\t"<<ct<<"<-ct\tisFile"<<isFile<<endl; 
                
                
                if(isFile)
                {
                    int size =0; 
                    int k = 0; 
                    for(; k< ct; k++)
                    {
                        auto b = buffer[k];
                        size+= b.size(); 
                        size++; 
                         //cout<<b<<"\t"; 
                    }
                   // cout<<result.size()<<endl; 
                    size+= result.size();
                    
                    maxval = max(maxval, size);
                }
                else
                {
                    if(ct>= buffer.size())
                    {
                        buffer.push_back(result);
                    }
                    else
                    {
                        buffer[ct] = result;
                        buffer.erase(buffer.begin()+ct+1, buffer.end());
                    }
                }
                prev = i+1; 
            }
        }
        
        return maxval; 
    }
};
