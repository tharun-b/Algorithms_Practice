class Solution {
public:
    int Util(int start, int end,  vector<vector<int>>  &table,vector<int>& nums)
    {
        if(start > end)
        {
            (table[start+1][end+1] = 0);
            return 0; 
        }
        
        if(start == end)
        {
            int lv = (start==0)? 1: nums[start-1];
            int rv = (end == nums.size()-1)?1:nums[end+1];
            table[start+1][end+1] = lv * rv * nums[start];
            return table[start+1][end+1]; 
        }
        
        int maxsum =0; 
        for(int i = start; i <= (end); i++)
        {
            
            int left = (table[start+1][i-1+1] < 0)? Util(start,i-1,table,nums):table[start+1][i];
            int right = (table[i+1+1][end+1] <0)? Util(i+1,end,table,nums):table[i+1+1][end+1];
        
            int lv = (start==0)? 1: nums[start-1];
            int rv = (end == nums.size()-1)?1:nums[end+1];
            
            maxsum = max(maxsum, (left+right + (nums[i] * lv* rv) ) );
        }
        table[start+1][end+1] = maxsum;
        return maxsum; 
        
    }
    int maxCoins(vector<int>& nums) {
        int n(nums.size());
        if(nums.size()<1) return 0; 
        if(nums.size()<2) return nums[0];
        
        vector<vector<int>> table(n+3,vector<int>(n+3,-1));
        
        return Util(0, (n-1), table,nums);        
    }
};
