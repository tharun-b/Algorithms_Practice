#define NUM_CHARS 26
struct TrieNode {
    TrieNode *ar[NUM_CHARS] = {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0} ;
    bool end_of_word = false; 
    int num_of_words = 0; 
};

class Trie {
    TrieNode *root = NULL;
public:
    unordered_map<string, bool> memo; 
    
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode ;
        TrieNode *ptr = root;
        for(int i =0; i< NUM_CHARS; i++)
        {
            ptr->ar[i] = NULL;
        }
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        if(word.empty()) return; 
        
        TrieNode *ptr = root; 
        for(auto c:word)
        {
            auto &pc = ptr->ar[c-'a'];
               if(pc== NULL)
               {
                    pc = new TrieNode; 
                   
               }
            
             ptr->num_of_words++; 

            ptr = pc; 
        }
        ptr->end_of_word = true;              
        ptr->num_of_words++; 
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        
        if(word.empty()) return true; 
        TrieNode *ptr = root; 
        for(auto c:word)
        {
            auto &pc = ptr->ar[c-'a'];
            if(pc == NULL) return false; 
            ptr = pc; 
        }
        return(ptr->end_of_word); 
        
    }
            
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        if(prefix.empty()) return true; 

        TrieNode *ptr = root; 
        for(auto c:prefix)
        {
            auto &pc = ptr->ar[c-'a'];
            if(pc == NULL) return false; 
            ptr = pc; 
        }
        return(ptr->num_of_words > 0); 
        
    }
    
  
    
    bool wordBreakTool(string &word, int start, int end) {
        
        if((word.empty()) || (end-start)<1) return true; 
        
        string temp(word.begin(), word.end());
        if(memo.count(temp) >0)
        {
            return memo[temp];
        }
        
        TrieNode *ptr = root; 

        bool logic = false; 
        for(int i = start; i < end ; i++)
        { 
            auto c = word[i];
           // cout<<c<<"\t";
            
            auto &pc = ptr->ar[c-'a'];
            
            if(pc == NULL) return false; 

            if(pc->end_of_word)
            {
                string s(word.begin()+start, word.begin()+i+1);
                memo[s] = true;
                
                string t(word.begin()+i+1, word.end()); 
                if(memo.count(t)>0)
                {
                    if(memo[t]) return true;
                }
                else
                    if(wordBreakTool(word, i+1, end))
                    {
                        memo[t] = true;
                        return true;
                    }
                    else
                    {
                        memo[t] = false; 
                    }
                

            }
            
            ptr = pc; 
        }
        return (logic || (ptr->end_of_word)); 
        
    }

};


class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        
        Trie *triedata = new Trie(); 
        
        for(auto str: wordDict)
        {
            triedata->insert(str);
        }
        
       
        return (triedata->wordBreakTool(s,0,s.size()));        
        
    }
};
