#define NUM_CHARS 26
struct TrieNode {
    TrieNode *ar[NUM_CHARS] = {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0} ;
    bool end_of_word = false; 
    int num_of_words = 0; 
};

class Trie {
    TrieNode *root = NULL;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode ;
        TrieNode *ptr = root;
        for(int i =0; i< NUM_CHARS; i++)
        {
            ptr->ar[i] = NULL;
        }
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        if(word.empty()) return; 
        
        TrieNode *ptr = root; 
        for(auto c:word)
        {
            auto &pc = ptr->ar[c-'a'];
               if(pc== NULL)
               {
                    pc = new TrieNode; 
                   
               }
            
             ptr->num_of_words++; 

            ptr = pc; 
        }
        ptr->end_of_word = true;              
        ptr->num_of_words++; 
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        
        if(word.empty()) return true; 
        TrieNode *ptr = root; 
        for(auto c:word)
        {
            auto &pc = ptr->ar[c-'a'];
            if(pc == NULL) return false; 
            ptr = pc; 
        }
        return(ptr->end_of_word); 
        
    }
        
    
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        if(prefix.empty()) return true; 

        TrieNode *ptr = root; 
        for(auto c:prefix)
        {
            auto &pc = ptr->ar[c-'a'];
            if(pc == NULL) return false; 
            ptr = pc; 
        }
        return(ptr->num_of_words > 0); 
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */
