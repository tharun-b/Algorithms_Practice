class Solution {
public:
    int minCostII(vector<vector<int>>& costs) {
        
        int n(costs.size());
        
        if(n<1) return 0;
        
        int k(costs[0].size()) ;
        
        if(k<1) return 0; 
        
        vector<long long int> prev(k,0); 
        
        int ik =0; 
        for(auto a: costs[0])
        {
            prev[ik] = a; 
            ik++; 
        }

        vector<long long int> temp(k,0); 
        
        for(int i =1; i < n; i++)
        {
            for(int jk = 0; jk < k; jk++)
            {
                
                long long int mintemp = (INT_MAX) ;
                for(int l = 0; (l < k) ; l++)
                {
                    if(l==jk) continue; 
                    else
                    {
                        mintemp = min(mintemp, prev[l]);
                    }
                }
                
                temp[jk] = (mintemp + costs[i][jk]); /* overflow */
                
            }
            swap(prev,temp); 

        }
        
        long long int minval = INT_MAX; 
        for(int jk =0; jk<k ; jk++)
        {
            minval = min(minval, prev[jk]);
        }
        
        return  minval;
        
        
    }
};


/* []
[[]]

[1 2]

[1
 2 ]
 
 
 [1 2 3 
  4 5 6 
  7 8 9 ]
